// src/services/firebaseGoogleAuth.js
import * as AuthSession from 'expo-auth-session';
import * as WebBrowser from 'expo-web-browser';
import { GoogleAuthProvider, signInWithCredential, signOut } from 'firebase/auth';
import { auth } from '../config/firebase';

// üîß CONFIGURATION POUR EXPO
WebBrowser.maybeCompleteAuthSession();

class FirebaseGoogleAuth {
    constructor() {
        // üîë CLIENT ID GOOGLE WEB (depuis Firebase Console)
        this.clientId = "714694473072-qffprtdc5au1birjkaf7g9qnnh23b8hl.apps.googleusercontent.com";

        // üí° Pour le trouver : Firebase Console > Project Settings > General > Web App > SDK setup and configuration
        // Ou dans google-services.json, cherchez le client avec "client_type": 3

        this.redirectUri = AuthSession.makeRedirectUri({
            useProxy: true, // Important pour Expo Go
        });

        console.log('üîß Firebase Google Auth initialis√©');
        console.log('üìç Redirect URI:', this.redirectUri);
    }

    // üîê CONNEXION GOOGLE
    async signInWithGoogle() {
        try {
            console.log('üîÑ D√©but connexion Google Firebase...');

            // 1. V√âRIFIER QUE AUTH EST INITIALIS√â
            if (!auth) {
                throw new Error('Firebase Auth non initialis√©');
            }

            // 2. CONFIGURATION GOOGLE AUTH REQUEST
            const request = new AuthSession.AuthRequest({
                clientId: this.clientId,
                scopes: ['openid', 'profile', 'email'],
                redirectUri: this.redirectUri,
                responseType: AuthSession.ResponseType.IdToken,
                additionalParameters: {},
                extraParams: {
                    nonce: this.generateNonce(),
                },
            });

            console.log('üìã Configuration auth request cr√©√©e');

            // 3. D√âMARRER LA CONNEXION
            const result = await request.promptAsync({
                authorizationEndpoint: 'https://accounts.google.com/oauth/authorize',
            });

            console.log('üìã R√©sultat auth:', result.type);

            if (result.type === 'success') {
                console.log('‚úÖ Authentification Google r√©ussie');

                // 4. R√âCUP√âRER ID TOKEN
                const { id_token } = result.params;

                if (!id_token) {
                    throw new Error('Pas d\'ID token re√ßu de Google');
                }

                console.log('üé´ ID Token re√ßu');

                // 5. CR√âER CREDENTIAL FIREBASE
                const credential = GoogleAuthProvider.credential(id_token);
                console.log('üîë Credential Firebase cr√©√©');

                // 6. CONNECTER √Ä FIREBASE
                const firebaseResult = await signInWithCredential(auth, credential);
                console.log('üî• Connexion Firebase r√©ussie:', firebaseResult.user.email);

                return {
                    success: true,
                    user: this.formatFirebaseUser(firebaseResult.user),
                    firebaseUser: firebaseResult.user,
                };

            } else if (result.type === 'cancel') {
                console.log('‚ùå Connexion annul√©e par l\'utilisateur');
                return {
                    success: false,
                    error: 'Connexion annul√©e',
                    code: 'CANCELLED'
                };
            } else {
                console.log('‚ùå √âchec authentification:', result);
                return {
                    success: false,
                    error: '√âchec de la connexion Google',
                    code: 'AUTH_FAILED'
                };
            }

        } catch (error) {
            console.error('‚ùå Erreur Google Auth:', error);

            // Messages d'erreur plus pr√©cis
            let errorMessage = 'Erreur de connexion Google';
            if (error.message.includes('not been registered')) {
                errorMessage = 'Configuration Firebase manquante - contactez le support';
            } else if (error.message.includes('network')) {
                errorMessage = 'Probl√®me de connexion internet';
            } else if (error.message.includes('client_id')) {
                errorMessage = 'Configuration Google invalide';
            }

            return {
                success: false,
                error: errorMessage,
                code: 'UNKNOWN_ERROR',
                details: error.message
            };
        }
    }

    // üö™ D√âCONNEXION
    async signOut() {
        try {
            await signOut(auth);
            console.log('‚úÖ D√©connexion Firebase r√©ussie');
            return { success: true };
        } catch (error) {
            console.error('‚ùå Erreur d√©connexion:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // üë§ UTILISATEUR ACTUEL
    getCurrentUser() {
        const user = auth.currentUser;
        if (user) {
            return {
                success: true,
                user: this.formatFirebaseUser(user)
            };
        }
        return {
            success: false,
            error: 'Aucun utilisateur connect√©'
        };
    }

    // üìä FORMATER UTILISATEUR FIREBASE
    formatFirebaseUser(firebaseUser) {
        return {
            id: firebaseUser.uid,
            email: firebaseUser.email,
            firstName: firebaseUser.displayName?.split(' ')[0] || 'Utilisateur',
            lastName: firebaseUser.displayName?.split(' ').slice(1).join(' ') || 'Google',
            fullName: firebaseUser.displayName || 'Utilisateur Google',
            photo: firebaseUser.photoURL || null,
            provider: 'google',
            emailVerified: firebaseUser.emailVerified,
            phone: null, // Google ne fournit pas le t√©l√©phone
            role: 'USER',
            // Donn√©es Firebase
            firebaseUid: firebaseUser.uid,
        };
    }

    // üî¢ G√âN√âRER NONCE (s√©curit√©)
    generateNonce() {
        const charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-._';
        let result = '';
        for (let i = 0; i < 32; i++) {
            result += charset[Math.floor(Math.random() * charset.length)];
        }
        return result;
    }

    // üëÄ √âCOUTER CHANGEMENTS D'AUTH
    onAuthStateChanged(callback) {
        return auth.onAuthStateChanged((user) => {
            console.log('üîÑ Auth state changed:', user ? user.email : 'No user');
            if (user) {
                callback({
                    success: true,
                    user: this.formatFirebaseUser(user)
                });
            } else {
                callback({
                    success: false,
                    user: null
                });
            }
        });
    }
}

// Export singleton
export default new FirebaseGoogleAuth();